window.data = window.data || {};
window.data.tutorials = window.data.tutorials || [];
window.data.tutorials.push({
  name: 'Derived Props',
  steps: [
    {
      name: 'An Example of Derived Properties',
      index: 1,
      description_html: '<p>Derived properties are properties which are computed based on the value of another property. They can be added with the derived hash in Backbone models, with the key being the property name and the value being an options object. The object should include an array at key deps of properties that the derived property relies on, as well as a function at key fn which should return the derived value. Derived properties will not be serialized with toJSON.</p><p>In this example, the derived property is <code>average_price</code>. In the highlighted javascript code, we can see that <code>average_price</code> has been added in the derived hash and has a dependency on the <code>products</code> collection. Whenever the products collection fires a change, update, or reset event, the derived property will be updated with the value of the return of <code>fn.</code> Notice that <code>{{average_price}}</code>, which is highlighted in the template, is where the average price will automatically be recalculated when any change in the collection occurs.</p><p>Try adding your own row in the table called "Total" that uses a <code>total_price</code> derived property to sum the price of all products.</p>',
      template: '<h2>Average Price Calculator</h2>\n<table class="pure-table pure-table-horizontal">\n  <thead>\n    <tr>\n      <th>Product</th>\n      <th>Price Slider</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    {{#products}}\n    <tr class="js-product">\n      <td>{{name}}</td>\n      <td><input class="js-price-edit" id="price" type="range" min="0" max="400" value="{{price}}"></td>\n      <td>${{price}}</td>\n    </tr>\n    {{/products}}\n    <tr>\n      <td><strong>Average</strong></td>\n      <td></td>\n      <td><strong>$``{{average_price}}``</strong></td>\n    </tr>\n  </tbody>\n</table>\n\n<div style="margin-top:40px"><strong>Add Product:</strong><div>\n\n<form class="pure-form pure-form-stacked js-new-product-form" name="New Product">\n  <input class="js-new-product-name pure-input-1-3" type="text" name="name" placeholder="Product Name">\n  <input class="js-new-product-price pure-input-1-3" type="number" min="0" max="400" name="price" placeholder="Price ($0-400)" width="200px">\n  <input class="js-new-product-submit pure-button pure-button-primary" type="submit">\n</form>',
      js: "var View = tungsten.View;\nvar Model = tungsten.Model;\nvar Collection = tungsten.Collection;\n\nvar AppModel = Model.extend({\n  relations: {\n    products: Collection\n  },\n  defaults: {\n    products: [\n      {'name': 'First Product', 'price': 350},\n      {'name': 'Second Product', 'price': 200}\n    ]\n  },\n  ``derived: {\n    average_price: {\n      deps: ['products'],\n      fn: function() {\n        var products = this.get('products');\n        var avg = products.reduce(function(sum, item) {\n          return sum + item.get('price');\n        }, 0) / products.size();\n\n        return Math.round(avg);\n      }\n    }\n  }\n}``);\n\nvar ProductView = View.extend({\n  events: {\n    'input .js-price-edit': 'modifyPrice'\n  },\n  modifyPrice: function(e) {\n    this.model.set('price', parseInt(e.currentTarget.value, 10));\n  }\n});\n\nvar NewProductView = View.extend({\n  events: {\n    'submit-data': 'addNewProduct'\n  },\n  addNewProduct: function(e, newProduct) {\n    e.preventDefault();\n    e.currentTarget.reset();\n\n    if (!newProduct.name || !newProduct.price) {\n      return;\n    }\n\n    newProduct.price = parseInt(newProduct.price, 10);\n    this.model.get('products').add(newProduct);\n  }\n});\n\nvar AppView = View.extend({\n  childViews: {\n    'js-new-product-form': NewProductView,\n    'js-product': ProductView\n  }\n});\n\nnew AppView({\n  el: document.getElementById('app'),\n  template: compiledTemplates.app_view,\n  model: new AppModel(),\n  dynamicInitialize: true\n});"
    }
  ]
});
