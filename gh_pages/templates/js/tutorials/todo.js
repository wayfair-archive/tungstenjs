window.data = window.data || {};
window.data.tutorials = window.data.tutorials || [];
window.data.tutorials.push({
  name: 'TodoMVC',
  steps: [
    {
      name: 'Add the ability to mark an item as completed.',
      index: 1,
      description_html: 'Clicking the checkbox should mark the todo as complete by updating its completed value and toggling the class completed on its parent "li"',
      //template_highlights: [{start: {line: 20, ch: 19}, end: {line: 20, ch: 36}}],
      js_highlights: [{start: {line: 55, ch: 2}, end: {line: 55, ch: 41}}, {start: {line: 4, ch: 2}, end: {line: 4, ch: 36}}, {start: {line: 11, ch: 2}, end: {line: 13, ch: 4}}, {start: {line: 75, ch: 2}, end: {line: 75, ch: 39}}, {start: {line: 67, ch: 2}, end: {line: 69, ch: 4}}],
      template: '<div class="todoapp">\n  <header class="header">\n    <h1>todos</h1>\n    <!-- todoapp -->\n    <input placeholder="What needs to be done?" type="text" autofocus="true" class="new-todo js-new-todo" value="{{newValue}}">\n  </header>\n  <section class="main">\n    <input class="toggle-all js-toggle-all" type="checkbox" {{#allCompleted}}checked="checked"{{/allCompleted}}>\n    <label for="toggle-all">Mark all as complete</label>\n    <ul class="todo-list js-todo-list">\n    {{#todoItems}}\n    {{^hidden}}\n      <li class="js-todo-item {{#completed}} completed {{/completed}} {{#editing}} editing {{/editing}}">\n      <!-- {{title}} -->\n      {{^editing}}\n        <div class="view">\n          <input class="toggle js-toggle" type="checkbox" {{#completed}}checked="checked"{{/completed}}>\n          <label class="js-todo-title">{{title}}</label>\n          <button class="destroy js-destroy"></button>\n        </div>\n      {{/editing}}\n      {{#editing}}\n      <input class="edit js-todo-edit" value="{{title}}">\n      {{/editing}}\n    </li>\n  {{/hidden}}\n\n        {{/todoItems}}\n  </ul>\n  </section>\n  {{#hasTodos}}\n  <footer class="footer">\n  <span class="js-todo-count todo-count"><strong>{{todoCount}}</strong> item{{#todoCountPlural}}s{{/todoCountPlural}} left</span>\n  {{#hasCompleted}}\n  <button class="clear-completed js-clear-completed">Clear completed</button>\n  {{/hasCompleted}}\n  </footer>\n  {{/hasTodos}}\n</div>',
      js: "var View = tungsten.backbone.View, Model = tungsten.backbone.Model, Collection = tungsten.backbone.Collection;\nvar ENTER_KEY = 13;\nvar ESC_KEY = 27;\nvar TodoItemView = View.extend({\n  events: { /* unimplemented */ },\n  handleBlurTodoEdit: function(e) {\n    // unimplemented\n  },\n  handleClickDestroy: function() {\n    // unimplemented\n  },\n  handleClickToggle: function() {\n    // unimplemented\n  },\n  handleDblClickTodoTitle: function(e) {\n    // unimplemented\n  },\n  handleKeyDownTodoEdit: function(e) {\n    // unimplemented\n  },\n  handleKeyPressTodoEdit: function(e) {\n    // unimplemented\n  },\n  clear: function(input) {\n    var value = input.value;\n\n    var trimmedValue = value.trim();\n\n    if (trimmedValue) {\n      this.model.set({ title: trimmedValue });\n      this.model.set('editing', false);\n    } else {\n      this.handleClickDestroy();\n    }\n  }\n}, {\n  debugName: 'TodoItemView'\n});\n\nvar NewItemView = View.extend({\n  events: {\n    'keyup': 'handleKeyup'\n  },\n  handleKeyup: function(e) {\n    // unimplemented\n  }\n}, {\n  debugName: 'NewTodoItemView'\n});\n\nvar AppView = View.extend({\n  childViews: { /* unimplemented */ },\n  events: { /* unimplemented */ },\n  handleClickClearCompleted: function() {\n    // unimplemented\n  },\n  handleClickToggleAll: function(e) {\n    // unimplemented\n  }\n}, {\n  debugName: 'TodoAppView'\n});\nvar ItemModel = Model.extend({\n  toggle: function() {\n    // unimplemented\n  }\n});\nvar ItemCollection = Collection.extend({\n  model: ItemModel\n});\nvar AppModel = Model.extend({\n  relations: { /* unimplemented */ },\n  defaults: {\n    todoItems: [],\n  },\n  postInitialize: function() {\n    this.listenTo(this, 'addItem', function(title) {\n      // unimplemented\n    });\n  },\n  derived: { /* unimplemented */ }\n});\n\nnew AppView({\n    el: document.querySelector('#app'),\n    template: compiledTemplates.app_view,\n    model: new AppModel({todoItems: [{title: 'Learn Tungsten.js'}, {title: 'Write todo app'}]}),\n    dynamicInitialize: true\n});"
    },
    {
      name: 'Add the ability to add a new todo item',
      index: 2,
      description_html: 'New todos are entered in the input at the top of the app. Pressing Enter creates the todo, appends it to the todo list, and clears the input.',
      //template_highlights: [{start: {line: 20, ch: 19}, end: {line: 20, ch: 36}}],
      js_highlights: [{start: {line: 49, ch: 2}, end: {line: 51, ch: 4}}, {start: {line: 57, ch: 2}, end: {line: 59, ch: 4}}, {start: {line: 85, ch: 2}, end: {line: 89, ch: 4}}],
      template: '<div class="todoapp">\n  <header class="header">\n    <h1>todos</h1>\n    <!-- todoapp -->\n    <input placeholder="What needs to be done?" type="text" autofocus="true" class="new-todo js-new-todo" value="{{newValue}}">\n  </header>\n  <section class="main">\n    <input class="toggle-all js-toggle-all" type="checkbox" {{#allCompleted}}checked="checked"{{/allCompleted}}>\n    <label for="toggle-all">Mark all as complete</label>\n    <ul class="todo-list js-todo-list">\n    {{#todoItems}}\n    {{^hidden}}\n      <li class="js-todo-item {{#completed}} completed {{/completed}} {{#editing}} editing {{/editing}}">\n      <!-- {{title}} -->\n      {{^editing}}\n        <div class="view">\n          <input class="toggle js-toggle" type="checkbox" {{#completed}}checked="checked"{{/completed}}>\n          <label class="js-todo-title">{{title}}</label>\n          <button class="destroy js-destroy"></button>\n        </div>\n      {{/editing}}\n      {{#editing}}\n      <input class="edit js-todo-edit" value="{{title}}">\n      {{/editing}}\n    </li>\n  {{/hidden}}\n\n        {{/todoItems}}\n  </ul>\n  </section>\n  {{#hasTodos}}\n  <footer class="footer">\n  <span class="js-todo-count todo-count"><strong>{{todoCount}}</strong> item{{#todoCountPlural}}s{{/todoCountPlural}} left</span>\n  {{#hasCompleted}}\n  <button class="clear-completed js-clear-completed">Clear completed</button>\n  {{/hasCompleted}}\n  </footer>\n  {{/hasTodos}}\n</div>',
      js: "var View = tungsten.backbone.View, Model = tungsten.backbone.Model, Collection = tungsten.backbone.Collection;\nvar ENTER_KEY = 13;\nvar ESC_KEY = 27;\nvar TodoItemView = View.extend({\n  events: {\n    'change .js-toggle': 'handleClickToggle'\n  },\n  handleBlurTodoEdit: function(e) {\n    // unimplemented\n  },\n  handleClickDestroy: function() {\n    // unimplemented\n  },\n  handleClickToggle: function() {\n    this.model.toggle();\n  },\n  handleDblClickTodoTitle: function(e) {\n    // unimplemented\n  },\n  handleKeyDownTodoEdit: function(e) {\n    // unimplemented\n  },\n  handleKeyPressTodoEdit: function(e) {\n    // unimplemented\n  },\n  clear: function(input) {\n    var value = input.value;\n\n    var trimmedValue = value.trim();\n\n    if (trimmedValue) {\n      this.model.set({ title: trimmedValue });\n      this.model.set('editing', false);\n    } else {\n      this.handleClickDestroy();\n    }\n  }\n}, {\n  debugName: 'TodoItemView'\n});\n\nvar NewItemView = View.extend({\n  events: {\n    'keyup': 'handleKeyup'\n  },\n  handleKeyup: function(e) {\n    // unimplemented\n  }\n}, {\n  debugName: 'NewTodoItemView'\n});\n\nvar AppView = View.extend({\n  childViews: {\n    'js-todo-item': TodoItemView\n  },\n  events: { /* unimplemented */ },\n  handleClickClearCompleted: function() {\n    // unimplemented\n  },\n  handleClickToggleAll: function(e) {\n    // unimplemented\n  }\n}, {\n  debugName: 'TodoAppView'\n});\nvar ItemModel = Model.extend({\n  toggle: function() {\n   this.set({ completed: !this.get('completed') });\n  }\n});\nvar ItemCollection = Collection.extend({\n  model: ItemModel\n});\nvar AppModel = Model.extend({\n  relations: {\n    todoItems: ItemCollection\n  },\n  defaults: {\n    todoItems: [],\n  },\n  postInitialize: function() {\n    this.listenTo(this, 'addItem', function(title) {\n      // unimplemented\n    });\n  },\n  derived: { /* unimplemented */ }\n});\n\nnew AppView({\n    el: document.querySelector('#app'),\n    template: compiledTemplates.app_view,\n    model: new AppModel({todoItems: [{title: 'Learn Tungsten.js'}, {title: 'Write todo app'}]}),\n    dynamicInitialize: true\n});"
    },
    {
      name: 'TodoMVC Completed Example',
      index: '&#9733;',
      description_html: 'This is the completed demo of TodoMVC.',
      template: '<div class="todoapp">\n  <header class="header">\n    <h1>todos</h1>\n    <!-- todoapp -->\n    <input placeholder="What needs to be done?" type="text" autofocus="true" class="new-todo js-new-todo" value="{{newValue}}">\n  </header>\n  <section class="main">\n    <input class="toggle-all js-toggle-all" type="checkbox" {{#allCompleted}}checked="checked"{{/allCompleted}}>\n    <label for="toggle-all">Mark all as complete</label>\n    <ul class="todo-list js-todo-list">\n    {{#todoItems}}\n    {{^hidden}}\n      <li class="js-todo-item {{#completed}} completed {{/completed}} {{#editing}} editing {{/editing}}">\n      <!-- {{title}} -->\n      {{^editing}}\n        <div class="view">\n          <input class="toggle js-toggle" type="checkbox" {{#completed}}checked="checked"{{/completed}}>\n          <label class="js-todo-title">{{title}}</label>\n          <button class="destroy js-destroy"></button>\n        </div>\n      {{/editing}}\n      {{#editing}}\n      <input class="edit js-todo-edit" value="{{title}}">\n      {{/editing}}\n    </li>\n  {{/hidden}}\n\n        {{/todoItems}}\n  </ul>\n  </section>\n  {{#hasTodos}}\n  <footer class="footer">\n  <span class="js-todo-count todo-count"><strong>{{todoCount}}</strong> item{{#todoCountPlural}}s{{/todoCountPlural}} left</span>\n  {{#hasCompleted}}\n  <button class="clear-completed js-clear-completed">Clear completed</button>\n  {{/hasCompleted}}\n  </footer>\n  {{/hasTodos}}\n</div>',
      js: "var View = tungsten.backbone.View, Model = tungsten.backbone.Model, Collection = tungsten.backbone.Collection;\nvar ENTER_KEY = 13;\nvar ESC_KEY = 27;\nvar TodoItemView = View.extend({\n  events: {\n    'blur .js-todo-edit': 'handleBlurTodoEdit',\n    'click .js-toggle': 'handleClickToggle',\n    'click .js-destroy': 'handleClickDestroy',\n    'dblclick .js-todo-title': 'handleDblClickTodoTitle',\n    'keydown .js-todo-edit': 'handleKeyDownTodoEdit',\n    'keypress .js-todo-edit': 'handleKeyPressTodoEdit'\n  },\n  handleBlurTodoEdit: function(e) {\n    if (!this.model.get('editing')) {\n      return;\n    }\n    this.clear(e.currentTarget);\n  },\n  handleClickDestroy: function() {\n    this.model.destroy();\n  },\n  handleClickToggle: function() {\n    this.model.toggle();\n  },\n  handleDblClickTodoTitle: function(e) {\n    this.model.set('editing', true);\n    e.currentTarget.focus();\n  },\n  handleKeyDownTodoEdit: function(e) {\n    if (e.which === ESC_KEY) {\n      this.model.set('editing', false);\n      this.model.set('title', this.model.get('title'));\n    }\n  },\n  handleKeyPressTodoEdit: function(e) {\n    if (e.which === ENTER_KEY) {\n      this.clear(e.currentTarget);\n    }\n  },\n  clear: function(input) {\n    var value = input.value;\n\n    var trimmedValue = value.trim();\n\n    if (trimmedValue) {\n      this.model.set({ title: trimmedValue });\n      this.model.set('editing', false);\n    } else {\n      this.handleClickDestroy();\n    }\n  }\n}, {\n  debugName: 'TodoItemView'\n});\n\nvar NewItemView = View.extend({\n  events: {\n    'keyup': 'handleKeyup'\n  },\n  handleKeyup: function(e) {\n    if (e.which === ENTER_KEY && e.currentTarget.value !== '') {\n      this.model.trigger('addItem', e.currentTarget.value.trim());\n      this.model.set('newValue', '');\n    } else  {\n      this.model.set('newValue', e.currentTarget.value);\n    }\n  }}, {\n  debugName: 'NewTodoItemView'\n});\n\nvar AppView = View.extend({\n  childViews: {\n    'js-new-todo': NewItemView,\n    'js-todo-item': TodoItemView\n  },\n  events: {\n    'click .js-toggle-all': 'handleClickToggleAll',\n    'click .js-clear-completed': 'handleClickClearCompleted'\n  },\n  handleClickClearCompleted: function() {\n    _.invoke(this.model.get('todoItems').where({completed: true}), 'destroy');\n    return false;\n  },\n  handleClickToggleAll: function(e) {\n    var completed = e.currentTarget.checked;\n    this.model.get('todoItems').each(function(item) {\n      item.set('completed', completed);\n    });\n  }\n}, {\n  debugName: 'TodoAppView'\n});\nvar ItemModel = Model.extend({\n  toggle: function() {\n    this.set({\n      completed: !this.get('completed')\n    });\n  }\n});\nvar ItemCollection = Collection.extend({\n  model: ItemModel\n});\nvar AppModel = Model.extend({\n  relations: {\n    todoItems: ItemCollection\n  },\n  defaults: {\n    todoItems: [],\n  },\n  postInitialize: function() {\n    this.listenTo(this, 'addItem', function(title) {\n      // @todo add code to clear toggle-all button\n      this.get('todoItems').add({title: title});\n      this.set({newValue: ''});\n    });\n  },\n  derived: {\n    hasTodos: {\n      deps: ['todoItems'],\n      fn: function() {\n        return this.get('todoItems').length > 0;\n      }\n    },\n    incompletedItems: {\n      deps: ['todoItems'],\n      fn: function() {\n        return this.get('todoItems').filter(function(item) {\n          return !item.get('completed');\n        });\n      }\n    },\n    allCompleted: {\n      deps: ['todoItems'],\n      fn: function() {\n        if (this.get('todoItems').length) {\n          return this.get('todoItems').every(function(item) {\n            return item.get('completed');\n          });\n        }\n      }\n    },\n    todoCount: {\n      deps: ['incompletedItems'],\n      fn: function() {\n        return this.get('incompletedItems').length;\n      }\n    },\n    todoCountPlural: {\n      deps: ['todoCount'],\n      fn: function() {\n        return this.get('todoCount') !== 1;\n      }\n    },\n    hasCompleted: {\n      deps: ['todoItems'],\n      fn: function() {\n        return this.get('todoItems').length - this.get('incompletedItems').length > 0;\n      }\n    }\n  }\n});\n\nnew AppView({\n    el: document.querySelector('#app'),\n    template: compiledTemplates.app_view,\n    model: new AppModel({}),\n    dynamicInitialize: true\n});"
    }
  ]
});